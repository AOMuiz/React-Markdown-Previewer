{"version":3,"sources":["components/Editor.jsx","components/Preview.jsx","components/ClearButton.jsx","App.js","index.js"],"names":["Editor","props","id","className","value","onChange","type","Preview","dangerouslySetInnerHTML","HTML","ClearButton","onClick","Click","children","App","handleChange","e","setState","text","target","clearEditor","state","__html","marked","this","breaks","getMarkdownText","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAgBeA,EAdF,SAACC,GACZ,OACE,6BACE,8BACEC,GAAG,SACHC,UAAU,yBACVC,MAAOH,EAAMG,MACbC,SAAUJ,EAAMI,SAChBC,KAAK,WCCEC,EATD,SAACN,GACb,OACE,6BACE,uBAAGC,GAAI,aAAP,cACA,yBAAKA,GAAG,UAAUM,wBAAyBP,EAAMQ,SCIxCC,EARG,SAACT,GACjB,OACE,4BAAQE,UAAU,QAAQQ,QAASV,EAAMW,OACtCX,EAAMY,WCwFEC,G,wDAvCb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAMRc,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOf,SATA,EAkBnBgB,YAAc,WACZ,EAAKH,SAAS,CACZC,KAAM,MAlBR,EAAKG,MAAQ,CACXH,KAlDY,yvCA+CG,E,8DAejB,MAAO,CAAEI,OADOC,IAAOC,KAAKH,MAAMH,KAAM,CAAEO,QAAQ,O,+BAU1C,IACAP,EAASM,KAAKH,MAAdH,KACR,OACE,yBAAKf,UAAU,OACf,sDACE,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAaS,MAAOY,KAAKJ,aAAzB,gBACA,kBAAC,EAAD,CAAQhB,MAAOc,EAAMb,SAAUmB,KAAKT,gBAEtC,kBAAC,EAAD,CAASZ,UAAU,YAAYM,KAAMe,KAAKE,yB,GAlChCC,cChDlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.bbe9789d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nlet Editor = (props) => {\r\n  return (\r\n    <div>\r\n      <textarea\r\n        id='editor'\r\n        className='form-control z-depth-1'\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        type='text'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\n\r\nlet Preview = (props) => {\r\n  return (\r\n    <div>\r\n      <p id= \"previewer\">Previewer:</p>\r\n      <div id='preview' dangerouslySetInnerHTML={props.HTML} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\n\r\nlet ClearButton = (props) => {\r\n  return (\r\n    <button className='clear' onClick={props.Click}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ClearButton;\r\n","import React, { Component } from \"react\";\nimport marked from \"marked\";\nimport Editor from \"./components/Editor\";\nimport Preview from \"./components/Preview\";\nimport ClearButton from \"./components/ClearButton\";\nimport \"./App.css\";\n\nconst initialState = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/175px-Markdown-mark.svg.png)\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: initialState,\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  getMarkdownText() {\n    var rawMarkup = marked(this.state.text, { breaks: true });\n    return { __html: rawMarkup };\n  }\n\n  clearEditor = () => {\n    this.setState({\n      text: \"\",\n    });\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div className='App'>\n      <header>MarkDown Previewer</header>\n        <div className='input'>\n          <ClearButton Click={this.clearEditor}>Clear Editor</ClearButton>\n          <Editor value={text} onChange={this.handleChange} />\n        </div>\n        <Preview className='converter' HTML={this.getMarkdownText()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/* <div className='row'>\n  <div className='col-6'>\n    <h4>Enter Your markdown Here</h4>\n    <textarea\n      name=''\n      id='editor'\n      cols='30'\n      rows='10'\n      value={text}\n      onChange={this.handleChange}></textarea>\n  </div>\n  <div\n    className='col-6'\n    id='preview'\n    dangerouslySetInnerHTML={this.getMarkdownText()}\n  />\n</div>; */","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}